<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>
<plugin>
   <extension-point id="vega_templates" name="com.mind_era.knime.vega.templates" schema="schema/vega_templates.exsd"/>

   <!-- This is an example for providing an own category 
      <extension
         point="org.knime.workbench.repository.categories">
      <category
            description="Category containing my nodes"
            icon="icons/default.png"
            level-id="myNodes"
            name="My nodes"
            path="/"/>
   </extension>
   -->
   <!--
   <extension
         point="org.knime.product.splashExtension">
      <splashExtension
            icon="icons/default_48.png"
            id="com.mind_era.knime.vega.batch.splashExtension"
            tooltip="BatchVegaViewer">
      </splashExtension>
   </extension>
   -->
   
   <extension
         point="org.knime.workbench.repository.nodes">
      <node
            category-path="/"
            factory-class="com.mind_era.knime.vega.batch.BatchVegaViewerNodeFactory"
            id="com.mind_era.knime.vega.batch.BatchVegaViewerNodeFactory"/>
   </extension>
   <extension point="org.eclipse.core.runtime.preferences">
      <initializer class="com.mind_era.knime.vega.batch.preferences.PreferenceInitializer">
      </initializer>
   </extension>
   <extension point="org.eclipse.ui.preferencePages">
      <page class="com.mind_era.knime.vega.batch.preferences.PreferencePage" id="com.mind_era.knime.vega.batch.preferences.PreferencePage" name="Vega Preferences" category="org.knime.workbench.ui.preferences"/>
   </extension>
   <extension
         point="com.mind_era.knime.vega.batch.vega_templates">
         <template name="Arc">
           <parameter paramType="numeric/real" name="$numeric$">
The column where the pie sizes come from.
           </parameter>
           <text>
{
  "name": "arc",
  "width": 400,
  "height": 400,
  "data": [
    {
      "name": "table",
      "url": "$inputTable$",
      "transform": [
        {"type": "pie", "value": "data.$numeric$"}
      ]
    }
  ],
  "scales": [
    {
      "name": "r",
      "type": "sqrt",
      "domain": {"data": "table", "field": "data.$numeric$"},
      "range": [20, 100]
    }
  ],
  "marks": [
    {
      "type": "arc",
      "from": {"data": "table"},
      "properties": {
        "enter": {
          "x": {"group": "width", "mult": 0.5},
          "y": {"group": "height", "mult": 0.5},
          "startAngle": {"field": "startAngle"},
          "endAngle": {"field": "endAngle"},
          "innerRadius": {"value": 20},
          "outerRadius": {"scale": "r", "field": "data.$numeric$"},
          "stroke": {"value": "#fff"}
        },
        "update": {
          "fill": {"value": "#ccc"}
        },
        "hover": {
          "fill": {"value": "pink"}
        }
      }
    }
  ]
}
           </text>
         </template>
         <template name="Area">
           <parameter paramType="numeric/real" name="$Xnumeric$">
The column where the values for the x axis come.
           </parameter>
           <parameter paramType="numeric/real" name="$Ynumeric$">
The column where the values for the y axis come.
           </parameter>
           <text>
{
  "width": 500,
  "height": 200,
  "padding": {"top": 10, "left": 30, "bottom": 30, "right": 10},
  "data": [
    {
      "name": "table",
      "url": "$inputTable$",
      "transform": [
        {"type": "sort", "by": "data.$Xnumeric$"}
      ]
    }
  ],
  "scales": [
    {
      "name": "x",
      "type": "linear",
      "range": "width",
      "zero": false,
      "domain": {"data": "table", "field": "data.$Xnumeric$"}
    },
    {
      "name": "y",
      "type": "linear",
      "range": "height",
      "nice": true,
      "domain": {"data": "table", "field": "data.$Ynumeric$"}
    }
  ],
  "axes": [
    {"type": "x", "scale": "x", "ticks": 20},
    {"type": "y", "scale": "y"}
  ],
  "marks": [
    {
      "type": "area",
      "from": {"data": "table"},
      "properties": {
        "enter": {
          "interpolate": {"value": "monotone"},
          "x": {"scale": "x", "field": "data.$Xnumeric$"},
          "y": {"scale": "y", "field": "data.$Ynumeric$"},
          "y2": {"scale": "y", "value": 0},
          "fill": {"value": "steelblue"}
        },
        "update": {
          "fillOpacity": {"value": 1}
        },
        "hover": {
          "fillOpacity": {"value": 0.5}
        }
      }
    }
  ]
}
           </text>
         </template>
         <template name="Grouped bar">
           <parameter name="$numeric$" paramType="numeric/any">
The column for the values
           </parameter>
           <parameter name="$nominal1$" paramType="categorical/any">
The column for the main split of values
           </parameter>
           <parameter name="$nominal2$" paramType="categorical/any">
The column for the inner (coloured) split of values
           </parameter>
           <text>
{
  "width": 300,
  "height": 240,
  "data": [
    {
      "name": "table",
      "url": "$inputTable$"
    }
  ],
  "scales": [
    {
      "name": "cat",
      "type": "ordinal",
      "range": "height",
      "padding": 0.2,
      "domain": {"data": "table", "field": "data.$nominal1$"}
    },
    {
      "name": "val",
      "range": "width",
      "round": true,
      "nice": true,
      "domain": {"data": "table", "field": "data.$numeric$"}
    },
    {
      "name": "color",
      "type": "ordinal",
      "range": "category20"
    }
  ],
  "axes": [
    {"type": "y", "scale": "cat", "tickSize": 0, "tickPadding": 8},
    {"type": "x", "scale": "val"}
  ],
  "marks": [
    {
      "type": "group",
      "from": {
        "data": "table",
        "transform": [{"type":"facet", "keys":["data.$nominal1$"]}]
      },
      "properties": {
        "enter": {
          "y": {"scale": "cat", "field": "key"},
          "height": {"scale": "cat", "band": true}
        }
      },
      "scales": [
        {
          "name": "pos",
          "type": "ordinal",
          "range": "height",
          "domain": {"field": "data.$nominal2$"}
        }
      ],
      "marks": [
        {
          "type": "rect",
          "properties": {
            "enter": {
              "y": {"scale": "pos", "field": "data.$nominal2$"},
              "height": {"scale": "pos", "band": true},
              "x": {"scale": "val", "field": "data.$numeric$"},
              "x2": {"scale": "val", "value": 0},
              "fill": {"scale": "color", "field": "data.$nominal2$"}
            }
          }
        },
        {
          "type": "text",
          "properties": {
            "enter": {
              "y": {"scale": "pos", "field": "data.$nominal2$"},
              "dy": {"scale": "pos", "band": true, "mult": 0.5},
              "x": {"scale": "val", "field": "data.$numeric$", "offset": -4},
              "fill": {"value": "white"},
              "align": {"value": "right"},
              "baseline": {"value": "middle"},
              "text": {"field": "data.$numeric$"}
            }
          }
        }
      ]
    }
  ]
}
           </text>
         </template>
         <template name="Population pyramid">
           <parameter name="$value$" paramType="numeric/any">
The column for the values (like number of people)
           </parameter>
           <parameter name="$binary$" paramType="categorical/any">
The column for the group to two populations (like sex)
           </parameter>
           <parameter name="$split$" paramType="ordinal/any">
The column for the split values (like age)
           </parameter>
           <text>
{
  "width": 700,
  "height": 400,
  "padding": {"top": 0, "left": 0, "bottom": 20, "right": 0},
  "data": [
    {
      "name": "pop2000",
      "url": "$inputTable$"
    }
  ],
  "scales": [
    {
      "name": "g",
      "domain": [0, 1],
      "range": [340, 10]
    },
    {
      "name": "y",
      "type": "ordinal",
      "range": "height",
      "reverse": true,
      "domain": {"data": "pop2000", "field": "data.$split$"}
    },
    {
      "name": "c",
      "type": "ordinal",
      "domain": [1, 2],
      "range": ["#1f77b4", "#e377c2"]
    }
  ],
  "marks": [
    {
      "type": "text",
      "interactive": false,
      "from": {
        "data": "pop2000",
        "transform": [{"type":"unique", "field":"data.$split$", "as":"$split$"}]
      },
      "properties": {
        "enter": {
          "x": {"value": 325},
          "y": {"scale": "y", "field": "$split$", "offset": 11},
          "text": {"field": "$split$"},
          "baseline": {"value": "middle"},
          "align": {"value": "center"},
          "fill": {"value": "#000"}
        }
      }
    },
    {
      "type": "group",
      "from": {
        "data": "pop2000",
        "transform": [
          {"type":"facet", "keys":["data.$binary$"]}
        ]
      },
      "properties": {
        "update": {
          "x": {"scale": "g", "field": "index"},
          "y": {"value": 0},
          "width": {"value": 300},
          "height": {"group": "height"}
        }
      },
      "scales": [
        {
          "name": "x",
          "type": "linear",
          "range": "width",
          "reverse": {"field": "index"},
          "nice": true,
          "domain": {"data": "pop2000", "field": "data.$value$"}
        }
      ],
      "axes": [
        {"type": "x", "scale": "x", "format": "s"}
      ],
      "marks": [
        {
          "type": "rect",
          "properties": {
            "enter": {
              "x": {"scale": "x", "field": "data.$value$"},
              "x2": {"scale": "x", "value": 0},
              "y": {"scale": "y", "field": "data.$split$"},
              "height": {"scale": "y", "band": true, "offset": -1},
              "fillOpacity": {"value": 0.6},
              "fill": {"scale": "c", "field": "data.$binary$"}
            }
          }
        }
      ]
    }
  ]
}
           </text>
         </template>
   </extension>
   
</plugin>
